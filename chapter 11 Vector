//head file
#ifndef VECTOR_hpp
#define VECTOR_hpp
#include<iostream>
namespace VECTOR{
class Vector
{
public:
    enum Mode{RECT,POL};
private:
    double x;
    double y;
    double mag;
    double ang;
    Mode mode;
    void set_mag();
    void set_ang();
    void set_x();
    void set_y();
public:
    Vector();
    Vector(double n1,double n2, Mode form=RECT);
    void reset(double n1,double n2, Mode form=RECT);
    ~Vector();
    double xval() const {return x;}
    double yval() const {return y;}
    double magval() const {return mag;}
    double angval() const {return ang;}
    void polar_mode();
    void rect_mode();
    Vector operator+(const Vector& b) const;
    Vector operator-(const Vector& b) const;
    Vector operator-() const;
    Vector operator*(double n) const;
    friend Vector operator*(double n, Vector &a);
    friend std::ostream& operator <<(std::ostream & os, Vector &v);
};
}
#endif /* bankAcount_hpp */

//define file
#include "vector.hpp"
#include<iostream>
#include<array>
#include<fstream>
#include<cctype>
#include<string>
#include<vector>
#include<cstring>
#include<cmath>
using std::string;
using std::cout;
namespace VECTOR
{
    const double rate=45/atan(1);
    Vector::Vector(double n1,double n2, Mode form){
        mode=form;
       if (form==RECT)
       {x=n1;y=n2;set_mag();set_ang();}
        else if(form==POL)
        {mag=n1;ang=n2;set_x();set_y();}
        else{
            cout<<"Incorrect input,set all element to 0\n";
        x=y=mag=ang=0;
            mode=RECT;}
    }
    void Vector::set_mag()
    {
        mag=sqrt(x*x+y*y);
    }
    void Vector::set_ang()
    {if(x==0&&y==0)
        ang=0;
        else
        ang=atan2(y,x);
    }
    void Vector::set_x()
    {
        x=mag*cos(ang);
    }
    void Vector::set_y()
    {
        y=mag*sin(ang);
    }
    Vector::Vector()
    {
        x=y=mag=ang=0;
        mode=RECT;
    }
    Vector::~Vector()
    {
        
    }
    void Vector::reset(double n1,double n2,Mode form){
        mode=form;
        if (form==RECT)
        {x=n1;y=n2;set_mag();set_ang();}
       else if(form==POL)
        {mag=n1;ang=n2;set_x();set_y();}
       else{
            cout<<"Incorrect input,set all element to 0\n";
        x=y=mag=ang=0;
           mode=RECT;}
    }
    void Vector::polar_mode(){
        mode=POL;
    }
    void Vector::rect_mode(){
        mode=RECT;
    }
    Vector Vector::operator+(const Vector& b) const{
        return Vector(x+b.x,y+b.y);
    }
    Vector Vector::operator-(const Vector& b) const{
        return Vector(x-b.x,y-b.y);
    }
    Vector Vector::operator-() const{
         return Vector(-x,-y);
    }
    Vector Vector::operator*(double n) const{
        return Vector(x*n,y*n);
    }
    Vector operator*(double n, Vector &a){
        return a*n;
    }
    std::ostream& operator <<(std::ostream & os, Vector &v){
        if(v.mode==Vector::RECT)
            os<<"(x,y)=("<<v.x<<","<<v.y<<")";
        else if(v.mode==Vector::POL)
            os<<"(m,a)=("<<v.mag<<","<<v.ang<<")";
        else
        os<<"Vector is invalid";
        return os;
    }
}
<<<<<<<<<
#include<iostream>
#include<fstream>
#include<array>
#include<fstream>
#include<cctype>
#include<string>
#include<vector>
#include<cstring>
#include<cstdlib>
#include<ctime>
#include "vector.hpp"
using namespace std;
int main()
{using VECTOR::Vector;
  //  ofstream outFile;
   // outFile.open("ans.txt");
    srand(time(0));
    double direction;
    Vector step;
    Vector result(0.0,0.0);
    unsigned long steps=0;
    double target;
    double dstep;
    cout<<"Enter target distance(q to quit)\n";
    while(cin>>target){
        cout<<"Enter the step length:";
        if(!(cin>>dstep))
            break;
    while(result.magval()<target)
    {
        direction=rand()%360;
        step.reset(dstep,direction,VECTOR::Vector::POL);
        result=result+step;
        steps++;
    }
        cout<<"After "<<steps<<"steps,\nthe subject has below following location\n"<<
        result<<endl;
        result.polar_mode();
        cout<<"or:"<<result<<"\nEnter a new number:";
        result.reset(0,0,Vector::RECT);
        steps=0;
    }
    cout<<"Bye\n";
    //outFile.close();
}
